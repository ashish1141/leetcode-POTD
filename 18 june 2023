class Solution {
    private:
    int mod=1000000007;
    int dfs(vector<vector<int>> &grid,int i,int j,vector<vector<int>> &vis)
    {
        if(vis[i][j]!=0)
        return vis[i][j];

        int ans = 1;

        if(i>0 && grid[i-1][j]>grid[i][j])
        ans = (ans%mod + (dfs(grid,i-1,j,vis))%mod)%mod;
        if(j>0 && grid[i][j-1]>grid[i][j])
        ans = (ans%mod + (dfs(grid,i,j-1,vis))%mod)%mod;
        if(i+1<grid.size() && grid[i+1][j]>grid[i][j])
        ans = (ans%mod + (dfs(grid,i+1,j,vis))%mod)%mod;
        if(j+1<grid[0].size() && grid[i][j+1]>grid[i][j])
        ans = (ans%mod + (dfs(grid,i,j+1,vis))%mod)%mod;

        vis[i][j] = ans;

        return ans;
    } 
public:
    int countPaths(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        long long ans=0;

        vector<vector<int>> vis(n,vector<int>(m,0));

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(vis[i][j]==0)
                dfs(grid,i,j,vis);

                

                ans += vis[i][j]%mod;
                ans = ans%mod;
            }
        }

        return (int)ans;
    }
};
